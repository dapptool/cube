{"version":3,"sources":["util/interact.js","comp/Minter.js","comp/Footer.js","App.js","reportWebVitals.js","index.js"],"names":["contractABI","require","govABI","contractAddress","govAddress","web3","Web3","window","ethereum","connectWallet","a","request","method","addressArray","obj","status","address","message","target","href","getCurrentWalletConnected","length","getTokenURI","sn","contract","eth","Contract","methods","tokenURI","call","getFreePlayNum","console","log","tidToPlayNum","getApproveState","govcontract","allowance","approveState","approveToken","transactionParameters","to","from","selectedAddress","value","data","approve","encodeABI","params","txHash","success","mintNFT","claim","upgradeParts","parts","trim","parseInt","Minter","props","useState","walletAddress","setWallet","setStatus","setApproveState","amount","setAmount","attributes","setAttributes","partslist","setPartslist","name","setName","freePlayNum","setFreePlayNum","getAttributes","baseStr","parameterName","result","tmp","items","split","index","decodeURIComponent","itemList","i","itemAttr","base","suffix","postfix","level","item","indexOf","replace","push","postfix_count","getItemList","updateInfo","Base64","decode","bagAttr","JSON","parse","animation_url","apstate","useEffect","addWalletListener","connectWalletPressed","walletResponse","on","accounts","onMintBtnPressed","onShowBtnPressed","onClickParts","part","partslist_t","onUpgradeBtnPressed","list","onApprovePressed","className","id","onClick","String","substring","Grid","container","xs","type","onChange","event","rel","map","attribute","style","color","Footer","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.16ca5dd6.chunk.js","sourcesContent":["// import { pinJSONToIPFS } from \"./pinata.js\";\n// require(\"dotenv\").config();\n// const alchemyKey = process.env.REACT_APP_ALCHEMY_KEY;\n// const contractABI = require(\"../contract-abi.json\");\n// const contractAddress = \"0x4C4a07F737Bf57F6632B6CAB089B78f62385aCaE\";\nimport Web3 from \"web3\";\nconst contractABI = require(\"./contract-abi.json\");\nconst govABI = require(\"./gov-abi.json\")\nconst contractAddress = \"0xd4935AB96bA596689bEb2aB31E649e4E8d686b15\";\nconst govAddress = \"0xe1fe139745bf06419aa637f005c72c3b80f8df7b\"\nconst Web3Utils = require('web3-utils');\n// const web3defualt = require('web3');\n// const Web3Utils = web3defualt.utils;\n\n// const { createAlchemyWeb3 } = require(\"@alch/alchemy-web3\");\nconst web3 = new Web3(window.ethereum);\nexport const connectWallet = async () => {\n  if (window.ethereum) {\n    try {\n      const addressArray = await window.ethereum.request({\n        method: \"eth_requestAccounts\",\n      });\n      const obj = {\n        status: \"\",\n        address: addressArray[0],\n      };\n      return obj;\n    } catch (err) {\n      return {\n        address: \"\",\n        status: \"😥 \" + err.message,\n      };\n    }\n  } else {\n    return {\n      address: \"\",\n      status: (\n        <span>\n          <p>\n            {\" \"}\n            🦊{\" \"}\n            <a target=\"_blank\" href={`https://metamask.io/download.html`}>\n              You must install Metamask, a virtual Ethereum wallet, in your\n              browser.\n            </a>\n          </p>\n        </span>\n      ),\n    };\n  }\n};\n\nexport const getCurrentWalletConnected = async () => {\n  if (window.ethereum) {\n    try {\n      const addressArray = await window.ethereum.request({\n        method: \"eth_accounts\",\n      });\n      if (addressArray.length > 0) {\n        return {\n          address: addressArray[0],\n          status: \".\",\n        };\n      } else {\n        return {\n          address: \"\",\n          status: \"🦊 Connect to Metamask using the top right button.\",\n        };\n      }\n    } catch (err) {\n      return {\n        address: \"\",\n        status: \"😥 \" + err.message,\n      };\n    }\n  } else {\n    return {\n      address: \"\",\n      status: (\n        <span>\n          <p>\n            {\" \"}\n            🦊{\" \"}\n            <a target=\"_blank\" href={`https://metamask.io/download.html`}>\n              You must install Metamask, a virtual Ethereum wallet, in your\n              browser.\n            </a>\n          </p>\n        </span>\n      ),\n    };\n  }\n};\n\nasync function loadContract() {\n  // console.log(contractABI, contractAddress)\n  return new web3.eth.Contract(contractABI, contractAddress);\n}\n\nexport const getTokenURI = async (sn) => {\n    if (!window.contract) {\n      window.contract = await new web3.eth.Contract(contractABI, contractAddress);\n    }\n    var tokenURI  = await window.contract.methods.tokenURI(sn).call();\n    // console.log(tokenURI);\n    return tokenURI;\n}\n\nexport const getFreePlayNum = async (sn) => {\n  if (!window.contract) {\n    window.contract = await new web3.eth.Contract(contractABI, contractAddress);\n  }\n  console.log(window.contract)\n  var tidToPlayNum  = await window.contract.methods.tidToPlayNum(sn).call();\n  console.log(tidToPlayNum);\n  return tidToPlayNum;\n}\n\nexport const getApproveState = async () => {\n  if (!window.govcontract) {\n    window.govcontract = await new web3.eth.Contract(govABI, govAddress);\n  }\n  if (window.ethereum) {\n    try {\n      const addressArray = await window.ethereum.request({\n        method: \"eth_requestAccounts\",\n      });\n      // console.log(addressArray[0],contractAddress);\n      // console.log(window.govcontract)\n      var approveState  = await window.govcontract.methods.allowance(addressArray[0], contractAddress).call();\n      // var approveState  = await window.govcontract.methods.balanceOf(addressArray[0]).call();\n      // console.log(Web3Utils.fromWei(approveState, \"ether\"));\n      return approveState;\n    } catch (err) {\n      return {\n        address: \"\",\n        status: \"😥 \" + err.message,\n      };\n    }\n  }\n}\n\nexport const approveToken = async () => {\n  if (!window.govcontract) {\n    window.govcontract = await new web3.eth.Contract(govABI, govAddress);\n  }\n  const transactionParameters = {\n    to: govAddress, // Required except during contract publications.\n    from: window.ethereum.selectedAddress, // must match user's active address.\n    value: 0,\n    data: window.govcontract.methods\n      .approve(contractAddress, \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\")\n      .encodeABI(),\n  };\n\n  try {\n    const txHash = await window.ethereum.request({\n      method: \"eth_sendTransaction\",\n      params: [transactionParameters],\n    });\n    return {\n      success: true,\n      status:\n        \"View transaction on Etherscan: https://rinkeby.etherscan.io/tx/\" +\n        txHash,\n    };\n  } catch (error) {\n    return {\n      success: false,\n      status: \"😥 Something went wrong: \" + error.message,\n    };\n  }\n}\n\nexport const mintNFT = async () => {\n  if (!window.contract) {\n    window.contract = await new web3.eth.Contract(contractABI, contractAddress);\n  }\n  const transactionParameters = {\n    to: contractAddress, // Required except during contract publications.\n    from: window.ethereum.selectedAddress, // must match user's active address.\n    value: 0,\n    data: window.contract.methods\n      .claim()\n      .encodeABI(),\n  };\n\n  try {\n    const txHash = await window.ethereum.request({\n      method: \"eth_sendTransaction\",\n      params: [transactionParameters],\n    });\n    return {\n      success: true,\n      status:\n        \"View transaction on Etherscan: https://rinkeby.etherscan.io/tx/\" +\n        txHash,\n    };\n  } catch (error) {\n    return {\n      success: false,\n      status: \"😥 Something went wrong: \" + error.message,\n    };\n  }\n}\n\nexport const upgradeParts = async (sn, parts) => {\n  if (sn.trim() == \"\") {\n    return {\n      success: false,\n      status: \"❗Amount cant be empty\"\n    };\n  }\n\n  sn = parseInt(sn)\n\n  if (!window.contract) {\n    window.contract = await new web3.eth.Contract(contractABI, contractAddress);\n  }\n  const transactionParameters = {\n    to: contractAddress, // Required except during contract publications.\n    from: window.ethereum.selectedAddress, // must match user's active address.\n    value: 0,\n    data: window.contract.methods\n      .upgradeParts(sn, parts)\n      .encodeABI(),\n  };\n\n  try {\n    const txHash = await window.ethereum.request({\n      method: \"eth_sendTransaction\",\n      params: [transactionParameters],\n    });\n    return {\n      success: true,\n      status:\n        \"View transaction on Etherscan: https://rinkeby.etherscan.io/tx/\" +\n        txHash,\n    };\n  } catch (error) {\n    return {\n      success: false,\n      status: \"😥 Something went wrong: \" + error.message,\n    };\n  }\n\n}\n","import { useEffect, useState } from \"react\";\nimport Base64  from 'base-64';\nimport { Button, Grid, Container } from '@material-ui/core';\nimport {\n  connectWallet,\n  getCurrentWalletConnected,\n  getTokenURI,\n  getApproveState,\n  approveToken,\n  mintNFT,\n  upgradeParts,\n  getFreePlayNum,\n  // mintNFT2,\n} from \"../util/interact.js\";\n\nconst Minter = (props) => {\n  const [walletAddress, setWallet] = useState(\"\");\n  const [status, setStatus] = useState(\"\");\n  const [approveState, setApproveState] = useState(0)\n  const [amount, setAmount] = useState(\"1\");\n  const [minted, setMinted] = useState(\"\");\n  const [attributes, setAttributes] = useState([])\n  const [partslist, setPartslist] = useState([0,0,0,0,0,0,0,0])\n  const [name, setName] = useState(\"\")\n  const [freePlayNum, setFreePlayNum] = useState(0)\n  const [refresher, setRefresher] = useState(-1)\n\n  const getItemList = (result) => {\n    var items = result.split(\",\");\n    var itemList = [];\n    for (var i=0; i<8; i++) {\n        let itemAttr = {\n          name: \"\",\n          base: \"\",\n          suffix: \"\",\n          postfix: \"\",\n          level: 1\n        }\n        var item = items[i];\n        itemAttr.name = item;\n        if (item.indexOf('[') == 0) {\n            itemAttr.suffix = item.split(']')[0].trim();\n            itemAttr.suffix = itemAttr.suffix.replace('[','');\n        }\n        if (item.indexOf('of') > 0) {\n            itemAttr.postfix = item.split('of')[1].trim();\n        }\n        itemAttr.base = item.replace('['+itemAttr.suffix+']', '').replace(itemAttr.postfix, '').replace('of', '').trim();\n        itemAttr.postfix = itemAttr.postfix.split('+')[0].trim();\n        itemList.push(itemAttr)\n      }\n      var postfix_count = {};\n      for (var i=0; i<8; i++) {\n        if (itemList[i].postfix == \"\") {\n          continue;\n        }\n        if ( itemList[i].postfix in postfix_count) {\n            postfix_count[itemList[i].postfix] += 1;\n        } else {\n            postfix_count[itemList[i].postfix] = 1;\n        }\n      }\n      for (var i=0; i<8; i++) {\n        if (itemList[i].postfix == \"\") {\n          continue;\n        }\n        itemList[i].level = postfix_count[itemList[i].postfix]\n      }\n    return itemList;\n  }\n  const getAttributes = (baseStr, parameterName) => {\n    var result = null,\n        tmp = [];\n    var items = baseStr.split(\"?\")[1].split(\"&\");\n    for (var index = 0; index < items.length; index++) {\n        tmp = items[index].split(\"=\");\n        if (tmp[0] === parameterName) result = decodeURIComponent(tmp[1]);\n    }\n    return getItemList(result)\n  }\n\n  const updateInfo = async () => {\n    var tokenURI = await getTokenURI(amount);\n    tokenURI = Base64.decode(tokenURI.split(\",\")[1])\n    var bagAttr = JSON.parse(tokenURI);\n    setName(bagAttr.name);\n    var attributes = getAttributes(bagAttr.animation_url, \"base\");\n    setAttributes(attributes);\n    var apstate = await getApproveState();\n    setApproveState(apstate);\n    var freePlayNum = await getFreePlayNum(amount);\n    setFreePlayNum(freePlayNum);\n    console.log(\"update\");\n\n  }\n\n  useEffect(async () => {\n    const { address, status } = await getCurrentWalletConnected();\n    setWallet(address);\n    setStatus(status);\n    addWalletListener();\n    await updateInfo();\n  }, []);\n\n  const connectWalletPressed = async () => {\n    const walletResponse = await connectWallet();\n    setStatus(walletResponse.status);\n    setWallet(walletResponse.address);\n  };\n\n  function addWalletListener() {\n    if (window.ethereum) {\n      window.ethereum.on(\"accountsChanged\", (accounts) => {\n        if (accounts.length > 0) {\n          setWallet(accounts[0]);\n          setStatus(\"👆🏽 Write a message in the text-field above.\");\n        } else {\n          setWallet(\"\");\n          setStatus(\"🦊 Connect to Metamask using the top right button.\");\n        }\n      });\n    } else {\n      setStatus(\n        <p>\n          {\" \"}\n          🦊{\" \"}\n          <a target=\"_blank\" href={`https://metamask.io/download.html`}>\n            You must install Metamask, a virtual Ethereum wallet, in your\n            browser.\n          </a>\n        </p>\n      );\n    }\n  }\n\n  // const onMintPressed = async () => {\n  //   const { success, status } = await mintNFT(url, name, description);\n  //   setStatus(status);\n  //   if (success) {\n  //     setName(\"\");\n  //     setDescription(\"\");\n  //     setURL(\"\");\n  //   }\n  // };\n\n\n  const onMintBtnPressed = async () => {\n    const { success, status } = await mintNFT();\n    console.log(success, status);\n    setStatus(status);\n    if (success) {\n    }\n  };\n  const onShowBtnPressed = async () => {\n    updateInfo();\n  };\n  //update parts list\n  const onClickParts = (part) => {\n    console.log(partslist);\n    var partslist_t = partslist;\n    if (partslist_t[part] == 1) {\n      partslist_t[part] = 0;\n    } else {\n      partslist_t[part] = 1;\n    }\n    setPartslist([...partslist_t])\n  }\n  const onUpgradeBtnPressed = async () => {\n    let list = []\n    for (var i = 0; i < partslist.length; i++) {\n      if (partslist[i] == 1) {\n        list.push(i)\n      }\n    }\n    console.log(list)\n    const {success, status } = await upgradeParts(amount, list)\n  };\n  const onApprovePressed = async () => {\n    const {success, status } = await approveToken();\n  }\n//test item\n  return (\n    <div className=\"Minter\">\n      <div className=\"header\">\n        <div className = \"header__logo\">\n          <a href=\"/\">Loot::Cube</a>\n        </div>\n        <div className = \"header__links\">\n          <ul><li>\n            <a id=\"walletButton\" onClick={connectWalletPressed}>\n              {walletAddress.length > 0 ? (\n                \"Connected: \" +\n                String(walletAddress).substring(0, 6) +\n                \"...\" +\n                String(walletAddress).substring(38)\n              ) : (\n                \"Connect Wallet\"\n              )}\n            </a>\n          </li><li>\n            <a id=\"faqButton\">\n              FAQ\n            </a>\n          </li></ul>\n        </div>\n      </div>\n      <div id=\"title\">Loot::Cube</div>\n      <Grid container className = \"home__feature\">\n        <Grid item xs = {2} />\n        <Grid item xs={8} className =\"desc\">Loot&Cube follows the item and affix system of Loot (Loot website), and derives a new function of replacing and\n         washing equipment (the core function of Cube), which pays tribute to Loot, the great NFT invention and classic ARPG Diablo II\n         </Grid>\n         <Grid item xs = {2} />\n      </Grid>\n      <Grid container className = \"home__feature\">\n        <Grid item xs={4} className = \"home__function\">\n          <h2>Mint a cube</h2>\n          <button id=\"mintButton\" onClick={onMintBtnPressed}>\n            MINT\n          </button>\n        </Grid>\n        <Grid item xs={4} className = \"home__function\">\n          <form>\n            <h2>Show a minted cube</h2>\n            <input\n              type=\"text\"\n              value={amount}\n              onChange={(event) => setAmount(event.target.value)}\n            />\n          </form>\n          <button id=\"showButton\" onClick={onShowBtnPressed}>\n            SHOW\n          </button>\n        </Grid>\n        {(approveState>0 || freePlayNum > 0) ?\n        <Grid item xs={4} className = \"home__function\">\n          <form>\n            <h2>Upgrade items</h2>\n            {freePlayNum > 0 ? <span>You have {freePlayNum} free upgrades</span> : \"\"}<br />\n            <input\n              type=\"text\"\n              value={amount}\n              onChange={(event) => setAmount(event.target.value)}\n            />\n          </form>\n          <ul>\n            <li><a className={(partslist[0]==1)?\"selected\":\"\"} onClick={() => onClickParts(0)}>Weapon</a></li>\n            <li><a className={(partslist[1]==1)?\"selected\":\"\"} onClick={() => onClickParts(1)}>Chest</a></li>\n            <li><a className={(partslist[2]==1)?\"selected\":\"\"} onClick={() => onClickParts(2)}>Head</a></li>\n            <li><a className={(partslist[3]==1)?\"selected\":\"\"} onClick={() => onClickParts(3)}>Waist</a></li>\n          </ul>\n          <ul>\n            <li><a className={(partslist[4]==1)?\"selected\":\"\"} onClick={() => onClickParts(4)}>Foot</a></li>\n            <li><a className={(partslist[5]==1)?\"selected\":\"\"} onClick={() => onClickParts(5)}>Hand</a></li>\n            <li><a className={(partslist[6]==1)?\"selected\":\"\"} onClick={() => onClickParts(6)}>Neck</a></li>\n            <li><a className={(partslist[7]==1)?\"selected\":\"\"} onClick={() => onClickParts(7)}>Ring</a></li>\n          </ul>\n          <button id=\"upgradeButton\" onClick={onUpgradeBtnPressed}>\n            UPGRADE\n          </button>\n        </Grid> : <Grid item xs={4} className = \"home__function\">\n            <h2>Upgrade items</h2>\n            <span>You need approve cube gov token before upgrade</span><br/>\n          <button id=\"approveButton\" onClick={onApprovePressed}>\n            Approve\n          </button>\n        </Grid>}\n      </Grid>\n      <div className=\"home__feature\">\n        <span>Current Bag:</span>\n        <a\n            href={\"https://testnets.opensea.io/assets/0xd4935AB96bA596689bEb2aB31E649e4E8d686b15/\"+amount}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            key={name}\n            className=\"bag\"\n          >\n            <div className=\"bag_attributes\">\n              <span>{name}</span>\n              <ul>\n                {attributes.map((attribute, i) => (\n                  <li className={(attribute.level > 2)?\"sritem\":\"\"} key={i}>\n                    {(attribute.suffix==\"\")?\"\":<span>[{attribute.suffix}]</span>}\n                    <span>{attribute.base}</span>\n                    <span>{(attribute.postfix!=\"\"?\" of \":\"\")}{attribute.postfix}</span>\n                  </li>\n                ))}\n              </ul>\n            </div>\n          </a>\n      </div>\n      <p id=\"status\" style={{ color: \"red\" }}>\n        {status}\n      </p>\n    </div>\n  );\n};\n\nexport default Minter;\n","function Footer() {\n  return (\n    <div className=\"footer\">\n        <p>Loot for Items，Cube for the Set</p>\n    </div>\n  );\n}\n\nexport default Footer;\n","import './App.scss';\nimport Minter from './comp/Minter';\nimport Footer from './comp/Footer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Minter></Minter>\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}