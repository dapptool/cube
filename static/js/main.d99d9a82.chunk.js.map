{"version":3,"sources":["util/interact.js","comp/Minter.js","comp/Footer.js","App.js","reportWebVitals.js","index.js"],"names":["contractABI","require","contractAddress","Web3Utils","web3","Web3","window","ethereum","connectWallet","a","request","method","addressArray","obj","status","address","message","target","href","getCurrentWalletConnected","length","getTokenURI","sn","contract","eth","Contract","methods","tokenURI","call","console","log","mintNFT","trim","success","parseInt","transactionParameters","to","from","selectedAddress","value","toHex","data","claim","encodeABI","params","txHash","upgradeParts","parts","Minter","props","useState","walletAddress","setWallet","setStatus","amount","setAmount","attributes","setAttributes","partslist","setPartslist","name","setName","getItemList","result","items","split","itemList","i","itemAttr","base","suffix","postfix","level","item","indexOf","replace","push","postfix_count","getAttributes","baseStr","parameterName","tmp","index","decodeURIComponent","useEffect","addWalletListener","Base64","decode","bagAttr","JSON","parse","animation_url","connectWalletPressed","walletResponse","on","accounts","onMintBtnPressed","onShowBtnPressed","onClickParts","part","partslist_t","onUpgradeBtnPressed","list","test_attributes","className","id","onClick","String","substring","Grid","container","xs","type","onChange","event","rel","map","attribute","style","color","Footer","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d99d9a82.chunk.js","sourcesContent":["// import { pinJSONToIPFS } from \"./pinata.js\";\n// require(\"dotenv\").config();\n// const alchemyKey = process.env.REACT_APP_ALCHEMY_KEY;\n// const contractABI = require(\"../contract-abi.json\");\n// const contractAddress = \"0x4C4a07F737Bf57F6632B6CAB089B78f62385aCaE\";\nimport Web3 from \"web3\";\nconst contractABI = require(\"../contract-abi.json\");\nconst contractAddress = \"0xDdB807A41858dFCd3cfaBeF9A5be81EC3be062fe\";\nconst Web3Utils = require('web3-utils');\n// const web3defualt = require('web3');\n// const Web3Utils = web3defualt.utils;\n\n// const { createAlchemyWeb3 } = require(\"@alch/alchemy-web3\");\nconst web3 = new Web3(window.ethereum);\n\nexport const connectWallet = async () => {\n  if (window.ethereum) {\n    try {\n      const addressArray = await window.ethereum.request({\n        method: \"eth_requestAccounts\",\n      });\n      const obj = {\n        status: \"\",\n        address: addressArray[0],\n      };\n      return obj;\n    } catch (err) {\n      return {\n        address: \"\",\n        status: \"😥 \" + err.message,\n      };\n    }\n  } else {\n    return {\n      address: \"\",\n      status: (\n        <span>\n          <p>\n            {\" \"}\n            🦊{\" \"}\n            <a target=\"_blank\" href={`https://metamask.io/download.html`}>\n              You must install Metamask, a virtual Ethereum wallet, in your\n              browser.\n            </a>\n          </p>\n        </span>\n      ),\n    };\n  }\n};\n\nexport const getCurrentWalletConnected = async () => {\n  if (window.ethereum) {\n    try {\n      const addressArray = await window.ethereum.request({\n        method: \"eth_accounts\",\n      });\n      if (addressArray.length > 0) {\n        return {\n          address: addressArray[0],\n          status: \".\",\n        };\n      } else {\n        return {\n          address: \"\",\n          status: \"🦊 Connect to Metamask using the top right button.\",\n        };\n      }\n    } catch (err) {\n      return {\n        address: \"\",\n        status: \"😥 \" + err.message,\n      };\n    }\n  } else {\n    return {\n      address: \"\",\n      status: (\n        <span>\n          <p>\n            {\" \"}\n            🦊{\" \"}\n            <a target=\"_blank\" href={`https://metamask.io/download.html`}>\n              You must install Metamask, a virtual Ethereum wallet, in your\n              browser.\n            </a>\n          </p>\n        </span>\n      ),\n    };\n  }\n};\n\nasync function loadContract() {\n  console.log(contractABI, contractAddress)\n  return new web3.eth.Contract(contractABI, contractAddress);\n}\n\n// export const getMintedAmount = async () => {\n//     if (!window.contract) {\n//       window.contract = await new web3.eth.Contract(contractABI, contractAddress);\n//     }\n//     var totalSupply  = await window.contract.methods.totalSupply().call();\n//     console.log('totalSupply', totalSupply);\n//     return totalSupply;\n//\n// }\n\nexport const getTokenURI = async (sn) => {\n    if (!window.contract) {\n      window.contract = await new web3.eth.Contract(contractABI, contractAddress);\n    }\n    var tokenURI  = await window.contract.methods.tokenURI(sn).call();\n    console.log(tokenURI);\n    return tokenURI;\n\n}\n\n\nexport const mintNFT = async (sn) => {\n  if (sn.trim() == \"\") {\n    return {\n      success: false,\n      status: \"❗Amount cant be empty\"\n    };\n  }\n\n  sn = parseInt(sn)\n\n  if (!window.contract) {\n    window.contract = await new web3.eth.Contract(contractABI, contractAddress);\n  }\n  const transactionParameters = {\n    to: contractAddress, // Required except during contract publications.\n    from: window.ethereum.selectedAddress, // must match user's active address.\n    value: Web3Utils.toHex(0.05*10**18) ,\n    data: window.contract.methods\n      .claim(sn)\n      .encodeABI(),\n  };\n\n  try {\n    const txHash = await window.ethereum.request({\n      method: \"eth_sendTransaction\",\n      params: [transactionParameters],\n    });\n    return {\n      success: true,\n      status:\n        \"View transaction on Etherscan: https://rinkeby.etherscan.io/tx/\" +\n        txHash,\n    };\n  } catch (error) {\n    return {\n      success: false,\n      status: \"😥 Something went wrong: \" + error.message,\n    };\n  }\n}\n\nexport const upgradeParts = async (sn, parts) => {\n  if (sn.trim() == \"\") {\n    return {\n      success: false,\n      status: \"❗Amount cant be empty\"\n    };\n  }\n\n  sn = parseInt(sn)\n\n  if (!window.contract) {\n    window.contract = await new web3.eth.Contract(contractABI, contractAddress);\n  }\n  const transactionParameters = {\n    to: contractAddress, // Required except during contract publications.\n    from: window.ethereum.selectedAddress, // must match user's active address.\n    value: Web3Utils.toHex(0.05*10**18) ,\n    data: window.contract.methods\n      .upgradeParts(sn, parts)\n      .encodeABI(),\n  };\n\n  try {\n    const txHash = await window.ethereum.request({\n      method: \"eth_sendTransaction\",\n      params: [transactionParameters],\n    });\n    return {\n      success: true,\n      status:\n        \"View transaction on Etherscan: https://rinkeby.etherscan.io/tx/\" +\n        txHash,\n    };\n  } catch (error) {\n    return {\n      success: false,\n      status: \"😥 Something went wrong: \" + error.message,\n    };\n  }\n\n}\n\n// export const mintNFT = async (url, name, description) => {\n//   if (url.trim() == \"\" || name.trim() == \"\" || description.trim() == \"\") {\n//     return {\n//       success: false,\n//       status: \"❗Please make sure all fields are completed before minting.\",\n//     };\n//   }\n\n//   //make metadata\n//   const metadata = new Object();\n//   metadata.name = name;\n//   metadata.image = url;\n//   metadata.description = description;\n\n//   const pinataResponse = await pinJSONToIPFS(metadata);\n//   if (!pinataResponse.success) {\n//     return {\n//       success: false,\n//       status: \"😢 Something went wrong while uploading your tokenURI.\",\n//     };\n//   }\n//   const tokenURI = pinataResponse.pinataUrl;\n\n//   window.contract = await new web3.eth.Contract(contractABI, contractAddress);\n\n//   const transactionParameters = {\n//     to: contractAddress, // Required except during contract publications.\n//     from: window.ethereum.selectedAddress, // must match user's active address.\n//     data: window.contract.methods\n//       .mintNFT(window.ethereum.selectedAddress, tokenURI)\n//       .encodeABI(),\n//   };\n\n//   try {\n//     const txHash = await window.ethereum.request({\n//       method: \"eth_sendTransaction\",\n//       params: [transactionParameters],\n//     });\n//     return {\n//       success: true,\n//       status:\n//         \"✅ Check out your transaction on Etherscan: https://ropsten.etherscan.io/tx/\" +\n//         txHash,\n//     };\n//   } catch (error) {\n//     return {\n//       success: false,\n//       status: \"😥 Something went wrong: \" + error.message,\n//     };\n//   }\n// };\n","import { useEffect, useState } from \"react\";\nimport Base64  from 'base-64';\nimport { Button, Grid, Container } from '@material-ui/core';\nimport {\n  connectWallet,\n  getCurrentWalletConnected,\n  getTokenURI,\n  mintNFT,\n  upgradeParts\n  // mintNFT2,\n} from \"../util/interact.js\";\n\nconst Minter = (props) => {\n  const [walletAddress, setWallet] = useState(\"\");\n  const [status, setStatus] = useState(\"\");\n\n  // const [name, setName] = useState(\"\");\n  // const [description, setDescription] = useState(\"\");\n  // const [url, setURL] = useState(\"\");\n\n  const [amount, setAmount] = useState(\"\");\n  const [minted, setMinted] = useState(\"\");\n  const [attributes, setAttributes] = useState([])\n  const [partslist, setPartslist] = useState([0,0,0,0,0,0,0])\n  const [name, setName] = useState(\"\")\n\n  const getItemList = (result) => {\n    var items = result.split(\",\");\n    var itemList = [];\n    for (var i=0; i<8; i++) {\n        let itemAttr = {\n          name: \"\",\n          base: \"\",\n          suffix: \"\",\n          postfix: \"\",\n          level: 1\n        }\n        var item = items[i];\n        itemAttr.name = item;\n        if (item.indexOf('[') == 0) {\n            itemAttr.suffix = item.split(']')[0].trim();\n            itemAttr.suffix = itemAttr.suffix.replace('[','');\n        }\n        if (item.indexOf('of') > 0) {\n            itemAttr.postfix = item.split('of')[1].trim();\n        }\n        itemAttr.base = item.replace('['+itemAttr.suffix+']', '').replace(itemAttr.postfix, '').replace('of', '').trim();\n        itemAttr.postfix = itemAttr.postfix.split('+')[0].trim();\n        itemList.push(itemAttr)\n      }\n      console.log(itemList);\n      var postfix_count = {};\n      for (var i=0; i<8; i++) {\n        if (itemList[i].postfix == \"\") {\n          continue;\n        }\n        if ( itemList[i].postfix in postfix_count) {\n            postfix_count[itemList[i].postfix] += 1;\n        } else {\n            postfix_count[itemList[i].postfix] = 1;\n        }\n      }\n      for (var i=0; i<8; i++) {\n        if (itemList[i].postfix == \"\") {\n          continue;\n        }\n        itemList[i].level = postfix_count[itemList[i].postfix]\n      }\n    return itemList;\n  }\n  const getAttributes = (baseStr, parameterName) => {\n    var result = null,\n        tmp = [];\n    var items = baseStr.split(\"?\")[1].split(\"&\");\n    for (var index = 0; index < items.length; index++) {\n        tmp = items[index].split(\"=\");\n        if (tmp[0] === parameterName) result = decodeURIComponent(tmp[1]);\n    }\n    return getItemList(result)\n  }\n\n  useEffect(async () => {\n    const { address, status } = await getCurrentWalletConnected();\n    setWallet(address);\n    setStatus(status);\n    setAmount(\"99\");\n    addWalletListener();\n\n    var tokenURI = await getTokenURI(8888);\n    console.log(\"bbb\",tokenURI);\n    tokenURI = Base64.decode(tokenURI.split(\",\")[1])\n    var bagAttr = JSON.parse(tokenURI);\n    // console.log(bagAttr);\n    setName(bagAttr.name);\n    var attributes = getAttributes(bagAttr.animation_url, \"base\");\n    // console.log(\"aaa\",attributes);\n    setAttributes(attributes);\n  }, []);\n  const connectWalletPressed = async () => {\n    const walletResponse = await connectWallet();\n    setStatus(walletResponse.status);\n    setWallet(walletResponse.address);\n  };\n\n  function addWalletListener() {\n    if (window.ethereum) {\n      window.ethereum.on(\"accountsChanged\", (accounts) => {\n        if (accounts.length > 0) {\n          setWallet(accounts[0]);\n          setStatus(\"👆🏽 Write a message in the text-field above.\");\n        } else {\n          setWallet(\"\");\n          setStatus(\"🦊 Connect to Metamask using the top right button.\");\n        }\n      });\n    } else {\n      setStatus(\n        <p>\n          {\" \"}\n          🦊{\" \"}\n          <a target=\"_blank\" href={`https://metamask.io/download.html`}>\n            You must install Metamask, a virtual Ethereum wallet, in your\n            browser.\n          </a>\n        </p>\n      );\n    }\n  }\n\n  // const onMintPressed = async () => {\n  //   const { success, status } = await mintNFT(url, name, description);\n  //   setStatus(status);\n  //   if (success) {\n  //     setName(\"\");\n  //     setDescription(\"\");\n  //     setURL(\"\");\n  //   }\n  // };\n\n\n  const onMintBtnPressed = async () => {\n    const { success, status } = await mintNFT(amount);\n    // setStatus(status);\n    // if (success) {\n    //  setAmount(\"\");\n      // setName(\"\");\n      // setDescription(\"\");\n      // setURL(\"\");\n    //}\n  };\n  const onShowBtnPressed = async () => {\n    var tokenURI = await getTokenURI(amount);\n    tokenURI = Base64.decode(tokenURI.split(\",\")[1])\n    var bagAttr = JSON.parse(tokenURI);\n    console.log(bagAttr);\n    setName(bagAttr.name);\n    var attributes = getAttributes(bagAttr.animation_url, \"base\");\n    console.log(\"aaa\",attributes);\n    setAttributes(attributes);\n  };\n  //update parts list\n  const onClickParts = (part) => {\n    console.log(partslist);\n    var partslist_t = partslist;\n    if (partslist_t[part] == 1) {\n      partslist_t[part] = 0;\n    } else {\n      partslist_t[part] = 1;\n    }\n    setPartslist([...partslist_t])\n  }\n  const onUpgradeBtnPressed = async () => {\n    let list = []\n    for (var i = 0; i < partslist.length; i++) {\n      if (partslist[i] == 1) {\n        list.push(i)\n      }\n    }\n    console.log(list)\n    const {success, status } = await upgradeParts(amount, list)\n  };\n//test item\n  const testStr = \"Scimitar of Titans,Shirt,Ornate Helm of Titans,Silk Sash of Titans,Silk Slippers,Demon's Hands,Necklace,Platinum Ring of Detection\";\n  var test_attributes = getItemList(testStr);\n  return (\n    <div className=\"Minter\">\n      <div className=\"header\">\n        <div className = \"header__logo\">\n          <a href=\"/\">Loot::Cube</a>\n        </div>\n        <div className = \"header__links\">\n          <ul><li>\n            <a id=\"walletButton\" onClick={connectWalletPressed}>\n              {walletAddress.length > 0 ? (\n                \"Connected: \" +\n                String(walletAddress).substring(0, 6) +\n                \"...\" +\n                String(walletAddress).substring(38)\n              ) : (\n                \"Connect Wallet\"\n              )}\n            </a>\n          </li></ul>\n        </div>\n      </div>\n      <div id=\"title\">Loot::Cube</div>\n      <Grid container className = \"home__feature\">\n        <Grid item xs={4} className = \"home__function\">\n          <form>\n            <h2>Mint a cube</h2>\n            <input\n              type=\"text\"\n              onChange={(event) => setAmount(event.target.value)}\n            />\n          </form>\n          <button id=\"mintButton\" onClick={onMintBtnPressed}>\n            Mint\n          </button>\n        </Grid>\n        <Grid item xs={4} className = \"home__function\">\n          <form>\n            <h2>Show a minted cube</h2>\n            <input\n              type=\"text\"\n              onChange={(event) => setAmount(event.target.value)}\n            />\n          </form>\n          <button id=\"showButton\" onClick={onShowBtnPressed}>\n            Show\n          </button>\n        </Grid>\n        <Grid item xs={4} className = \"home__function\">\n          <form>\n            <h2>Upgrade items</h2>\n            <input\n              type=\"text\"\n              onChange={(event) => setAmount(event.target.value)}\n            />\n          </form>\n          <ul>\n            <li><a className={(partslist[0]==1)?\"selected\":\"\"} onClick={() => onClickParts(0)}>Weapon</a></li>\n            <li><a className={(partslist[1]==1)?\"selected\":\"\"} onClick={() => onClickParts(1)}>Chest</a></li>\n            <li><a className={(partslist[2]==1)?\"selected\":\"\"} onClick={() => onClickParts(2)}>Head</a></li>\n            <li><a className={(partslist[3]==1)?\"selected\":\"\"} onClick={() => onClickParts(3)}>Waist</a></li>\n          </ul>\n          <ul>\n            <li><a className={(partslist[4]==1)?\"selected\":\"\"} onClick={() => onClickParts(4)}>Foot</a></li>\n            <li><a className={(partslist[5]==1)?\"selected\":\"\"} onClick={() => onClickParts(5)}>Hand</a></li>\n            <li><a className={(partslist[6]==1)?\"selected\":\"\"} onClick={() => onClickParts(6)}>Neck & Ring</a></li>\n          </ul>\n          <button id=\"upgradeButton\" onClick={onUpgradeBtnPressed}>\n            Upgrade\n          </button>\n        </Grid>\n      </Grid>\n      <div className=\"home__feature\">\n        <span>Current Bag:</span>\n        <a\n            href={`https://testnet.opensea.io/assets/0xac89ec4b3384567497e2fd4c46d61ee9c6d6b139/999`}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            key={name}\n            className=\"bag\"\n          >\n            <div className=\"bag_attributes\">\n              <span>{name}</span>\n              <ul>\n                {attributes.map((attribute, i) => (\n                  <li className={(attribute.level > 1)?\"sritem\":\"\"} key={i}>\n                    {(attribute.suffix==\"\")?\"\":<span>[{attribute.suffix}]</span>}\n                    <span>{attribute.base}</span>\n                    <span>{(attribute.postfix!=\"\"?\" of \":\"\")}{attribute.postfix}</span>\n                  </li>\n                ))}\n              </ul>\n            </div>\n          </a>\n          <a\n              href={`https://testnet.opensea.io/assets/0xac89ec4b3384567497e2fd4c46d61ee9c6d6b139/999`}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              key=\"test\"\n              className=\"bag\"\n            >\n              <div className=\"bag_attributes\">\n                <span>Test Bag</span>\n                <ul>\n                  {test_attributes.map((attribute, i) => (\n                    <li className={(attribute.level > 1)?\"sritem\":\"\"} key={i}>\n                      {(attribute.suffix==\"\")?\"\":<span>[{attribute.suffix}]</span>}\n                      <span>{attribute.base}</span>\n                      <span>{(attribute.postfix!=\"\"?\" of \":\"\")}{attribute.postfix}</span>\n                    </li>\n                  ))}\n                </ul>\n              </div>\n            </a>\n      </div>\n      <p id=\"status\" style={{ color: \"red\" }}>\n        {status}\n      </p>\n    </div>\n  );\n};\n\nexport default Minter;\n","function Footer() {\n  return (\n    <div className=\"footer\">\n        <p>Loot for Items，Cube for the Set</p>\n    </div>\n  );\n}\n\nexport default Footer;\n","import './App.scss';\nimport Minter from './comp/Minter';\nimport Footer from './comp/Footer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Minter></Minter>\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}